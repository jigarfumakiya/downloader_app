// Mocks generated by Mockito 5.4.0 from annotations
// in downloader_app/test/utils/test.mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:downloader_app/core/service/downloader_service/download_manager.dart'
    as _i5;
import 'package:downloader_app/core/service/downloader_service/download_service.dart'
    as _i6;
import 'package:downloader_app/core/service/notification_service.dart' as _i3;
import 'package:downloader_app/features/home/data/datasource/local/database/table/download_table.dart'
    as _i8;
import 'package:flutter_local_notifications/flutter_local_notifications.dart'
    as _i2;
import 'package:http/http.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFlutterLocalNotificationsPlugin_0 extends _i1.SmartFake
    implements _i2.FlutterLocalNotificationsPlugin {
  _FakeFlutterLocalNotificationsPlugin_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i3.NotificationService {
  MockNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FlutterLocalNotificationsPlugin get flutterLocalNotificationsPlugin =>
      (super.noSuchMethod(
        Invocation.getter(#flutterLocalNotificationsPlugin),
        returnValue: _FakeFlutterLocalNotificationsPlugin_0(
          this,
          Invocation.getter(#flutterLocalNotificationsPlugin),
        ),
      ) as _i2.FlutterLocalNotificationsPlugin);
  @override
  _i4.Future<void> initNotification() => (super.noSuchMethod(
        Invocation.method(
          #initNotification,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> showNotification(
    String? title,
    String? body,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #showNotification,
          [
            title,
            body,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [DownloadManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockDownloadManager extends _i1.Mock implements _i5.DownloadManager {
  MockDownloadManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String> addDownload(
    String? magnetUri,
    String? savePath, {
    required _i6.ProgressCallback? progressCallback,
    required _i6.ProgressDoneCallback? doneCallback,
    required _i6.ProgressErrorCallback? errorCallback,
    _i7.Client? client,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDownload,
          [
            magnetUri,
            savePath,
          ],
          {
            #progressCallback: progressCallback,
            #doneCallback: doneCallback,
            #errorCallback: errorCallback,
            #client: client,
          },
        ),
        returnValue: _i4.Future<String>.value(''),
      ) as _i4.Future<String>);
  @override
  void pauseAllDownloads() => super.noSuchMethod(
        Invocation.method(
          #pauseAllDownloads,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void resumeAllDownloads() => super.noSuchMethod(
        Invocation.method(
          #resumeAllDownloads,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void pauseDownload(String? id) => super.noSuchMethod(
        Invocation.method(
          #pauseDownload,
          [id],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void resumeDownload(String? id) => super.noSuchMethod(
        Invocation.method(
          #resumeDownload,
          [id],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.DownloadState getDownloadState(String? downloadId) => (super.noSuchMethod(
        Invocation.method(
          #getDownloadState,
          [downloadId],
        ),
        returnValue: _i8.DownloadState.notStarted,
      ) as _i8.DownloadState);
}
